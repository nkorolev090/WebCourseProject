// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace lab.Migrations
{
    [DbContext(typeof(ModelAutoService))]
    [Migration("20240323144025_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DomainModel.Breakdown", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Info")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("info");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.Property<int>("Warranty")
                        .HasColumnType("int")
                        .HasColumnName("warranty");

                    b.HasKey("Id");

                    b.ToTable("Breakdown", (string)null);
                });

            modelBuilder.Entity("DomainModel.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("brand");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("color");

                    b.Property<int>("Mileage")
                        .HasColumnType("int")
                        .HasColumnName("mileage");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("model");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.HasKey("Id")
                        .HasName("PK_CAR");

                    b.HasIndex("OwnerId");

                    b.ToTable("Car", (string)null);
                });

            modelBuilder.Entity("DomainModel.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int")
                        .HasColumnName("discount_id");

                    b.Property<int>("DiscountPoints")
                        .HasColumnType("int")
                        .HasColumnName("discount_points");

                    b.Property<string>("Midname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("midname");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("surname");

                    b.Property<string>("TelNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("tel_number");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("DomainModel.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("Sale")
                        .HasColumnType("int")
                        .HasColumnName("sale");

                    b.HasKey("Id");

                    b.ToTable("Discount", (string)null);
                });

            modelBuilder.Entity("DomainModel.Mechanic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Midname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("midname");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("surname");

                    b.Property<string>("TelNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("tel_number");

                    b.HasKey("Id");

                    b.ToTable("Mechanic", (string)null);
                });

            modelBuilder.Entity("DomainModel.MechanicBreakdown", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BreakdownId")
                        .HasColumnType("int")
                        .HasColumnName("breakdown_id");

                    b.Property<int>("MechanicId")
                        .HasColumnType("int")
                        .HasColumnName("mechanic_id");

                    b.HasKey("Id");

                    b.HasIndex("BreakdownId");

                    b.HasIndex("MechanicId");

                    b.ToTable("Mechanic-Breakdown", (string)null);
                });

            modelBuilder.Entity("DomainModel.Registration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("car_id");

                    b.Property<string>("Info")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("info");

                    b.Property<DateTime?>("RegDate")
                        .HasColumnType("date")
                        .HasColumnName("reg_date");

                    b.Property<int?>("RegPrice")
                        .HasColumnType("int")
                        .HasColumnName("reg_price");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("Status");

                    b.ToTable("Registration", (string)null);
                });

            modelBuilder.Entity("DomainModel.Slot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BreakdownId")
                        .HasColumnType("int")
                        .HasColumnName("breakdown_id");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("date")
                        .HasColumnName("finish_date");

                    b.Property<TimeSpan>("FinishTime")
                        .HasPrecision(0)
                        .HasColumnType("time(0)")
                        .HasColumnName("finish_time");

                    b.Property<int>("MechanicId")
                        .HasColumnType("int")
                        .HasColumnName("mechanic_id");

                    b.Property<int?>("RegistrationId")
                        .HasColumnType("int")
                        .HasColumnName("registration_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<TimeSpan>("StartTime")
                        .HasPrecision(0)
                        .HasColumnType("time(0)")
                        .HasColumnName("start_time");

                    b.HasKey("Id");

                    b.HasIndex("BreakdownId");

                    b.HasIndex("MechanicId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("Slot", (string)null);
                });

            modelBuilder.Entity("DomainModel.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Status", (string)null);
                });

            modelBuilder.Entity("DomainModel.Car", b =>
                {
                    b.HasOne("DomainModel.Client", "Owner")
                        .WithMany("Cars")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK_CAR_Client");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DomainModel.Client", b =>
                {
                    b.HasOne("DomainModel.Discount", "Discount")
                        .WithMany("Clients")
                        .HasForeignKey("DiscountId")
                        .IsRequired()
                        .HasConstraintName("FK_Client_Discount");

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("DomainModel.MechanicBreakdown", b =>
                {
                    b.HasOne("DomainModel.Breakdown", "Breakdown")
                        .WithMany("MechanicBreakdowns")
                        .HasForeignKey("BreakdownId")
                        .IsRequired()
                        .HasConstraintName("FK_Mechanic-Breakdown_Breakdown");

                    b.HasOne("DomainModel.Mechanic", "Mechanic")
                        .WithMany("MechanicBreakdowns")
                        .HasForeignKey("MechanicId")
                        .IsRequired()
                        .HasConstraintName("FK_Mechanic-Breakdown_Mechanic");

                    b.Navigation("Breakdown");

                    b.Navigation("Mechanic");
                });

            modelBuilder.Entity("DomainModel.Registration", b =>
                {
                    b.HasOne("DomainModel.Car", "Car")
                        .WithMany("Registrations")
                        .HasForeignKey("CarId")
                        .IsRequired()
                        .HasConstraintName("FK_Registration_CAR");

                    b.HasOne("DomainModel.Status", "StatusNavigation")
                        .WithMany("Registrations")
                        .HasForeignKey("Status")
                        .IsRequired()
                        .HasConstraintName("FK_Registration_Status");

                    b.Navigation("Car");

                    b.Navigation("StatusNavigation");
                });

            modelBuilder.Entity("DomainModel.Slot", b =>
                {
                    b.HasOne("DomainModel.Breakdown", "Breakdown")
                        .WithMany("Slots")
                        .HasForeignKey("BreakdownId")
                        .HasConstraintName("FK_Slot_Breakdown");

                    b.HasOne("DomainModel.Mechanic", "Mechanic")
                        .WithMany("Slots")
                        .HasForeignKey("MechanicId")
                        .IsRequired()
                        .HasConstraintName("FK_Slot_Mechanic");

                    b.HasOne("DomainModel.Registration", "Registration")
                        .WithMany("Slots")
                        .HasForeignKey("RegistrationId")
                        .HasConstraintName("FK_Slot_Registration");

                    b.Navigation("Breakdown");

                    b.Navigation("Mechanic");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("DomainModel.Breakdown", b =>
                {
                    b.Navigation("MechanicBreakdowns");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("DomainModel.Car", b =>
                {
                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("DomainModel.Client", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("DomainModel.Discount", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("DomainModel.Mechanic", b =>
                {
                    b.Navigation("MechanicBreakdowns");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("DomainModel.Registration", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("DomainModel.Status", b =>
                {
                    b.Navigation("Registrations");
                });
#pragma warning restore 612, 618
        }
    }
}
